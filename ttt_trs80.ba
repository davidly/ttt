1  REM Tic Tac Toe solving app that learns what WOPR learned: you can't win
2  REM Only three starting positions are examined. Others are just reflections of these
3  REM B%   -- The board
4  REM AL%  -- Alpha, for pruning
5  REM BE%  -- Beta, for pruning
6  REM WI%  -- The winning piece (0 none, 1 X, 2, O )
7  REM RE%  -- Resulting score of 4000/minmax board position. 0 draw, 1 X win, -1 Y win )
8  REM SX%  -- Stack array for "recursion"
9  REM V%   -- Value of a board position
10 REM ST%  -- Stack Pointer. Even for alpha/beta pruning Minimize plys, Odd for Maximize
11 REM R%   -- Current Row where a new piece is played
12 REM C%   -- Current Column where a new piece is played
13 REM RW%  -- Row in the Winner function (2000)
14 REM CW%  -- Column in the Winner function (2000)
15 REM RP%  -- Row when printing the board (1000)
16 REM CA%, RC%, CC% -- result, row, and column in Cat's game detection (3000) (unused)
17 REM Note: Can't use real recursion with GOSUB because stack is limited to roughly 5 deep
20 DIM B%(3,3)
21 B%(0,0) = 1
22 AL% = -100
23 BE% = 100
24 GOSUB 1000
25 GOSUB 2000
26 PRINT "winner ";WI%
30 GOSUB 3000
31 PRINT "cats";CATS%
32 DIM SR%(10)
33 DIM SC%(10)
34 DIM SV%(10)
36 DIM SA%(10)
37 DIM SB%(10)
39 PRINT "start time: ";TIME$
40 GOSUB 4000
50 PRINT "result of board A ";RE%;" ";TIME$
60 B%(0,0)=0
61 B%(0,1)=1
62 GOSUB 4000
63 PRINT "result of board B ";RE%;" ";TIME$
70 B%(0,1)=0
71 B%(1,1)=1
72 GOSUB 4000
73 PRINT "result of board C ";RE%;" ";TIME$
100 END

999 REM function to print the board
1000 FOR RP% = 0 TO 2
1010 PRINT B%(RP%,0);" ";B%(RP%,1);" ";B%(RP%,2)
1020 NEXT RP%
1025 RETURN

1999 REM  function to find a winner returned in WI%. 0 = nobody, 1 = X, 2 = O
2000 WI% = B%(0,0)
2005 IF WI% = 0 GOTO 2020
2010 IF WI% = B%(0,1) AND WI% = B%(0,2) THEN RETURN
2015 IF WI% = B%(1,0) AND WI% = B%(2,0) THEN RETURN
2020 WI% = B%(1,0)
2025 IF WI% <> 0 AND WI% = B%(1,1) AND WI%=B%(1,2) THEN RETURN
2030 WI% = B%(2,0)
2035 IF WI% <> 0 AND WI% = B%(2,1) AND WI%=B%(2,2) THEN RETURN
2040 WI% = B%(0,1)
2045 IF WI% <> 0 AND WI% = B%(1,1) AND WI%=B%(2,1) THEN RETURN
2050 WI% = B%(0,2)
2055 IF WI% <> 0 AND WI% = B%(1,2) AND WI%=B%(2,2) THEN RETURN
2070 WI% = B%(1,1)
2075 IF WI% = 0 THEN RETURN
2080 IF WI% = B%(0,0) AND WI% = B%(2,2) THEN RETURN
2085 IF WI% = B%(0,2) AND WI% = B%(2,0) THEN RETURN
2090 WI% = 0
2095 RETURN

2999 REM function to find a cat's game (unused)
3000 CA% = 0
3005 FOR RC% = 0 TO 2
3010 FOR CC% = 0 TO 2
3015 IF 0 = B%(RC%,CC%) THEN RETURN
3020 NEXT CC%
3025 NEXT RC%
3030 CA% = 1
3035 RETURN

4000 REM minmax function to find score of a board position
4001 REM recursion is simulated with GOTOs
4030 ST% = 0
4040 V% = 0
4060 RE% = 0
4100 IF ST% < 4 THEN GOTO 4150
4105 GOSUB 2000
4110 IF WI% = 1 THEN RE% = 1 : GOTO 4280
4120 IF WI% = 2 THEN RE% = -1 : GOTO 4280
4140 IF ST% = 8 THEN RE% = 0 : GOTO 4280
4150 IF ST% AND 1 THEN V% = -100 ELSE V% = 100
4160 R% = 0
4170 C% = 0
4180 IF 0 <> B%(R%,C%) THEN GOTO 4500
4200 IF ST% AND 1 THEN B%(R%,C%) = 1 ELSE B%(R%,C%) = 2
4210 SR%(ST%) = R%
4220 SC%(ST%) = C%
4230 SV%(ST%) = V%
4245 SA%(ST%) = AL%
4246 SB%(ST%) = BE%
4260 ST% = ST% + 1
4270 GOTO 4100
4280 ST% = ST% - 1
4290 R% = SR%(ST%)
4300 C% = SC%(ST%)
4310 V% = SV%(ST%)
4325 AL% = SA%(ST%)
4326 BE% = SB%(ST%)
4328 B%(R%,C%) = 0
4330 IF ST% AND 1 GOTO 4340
4332 IF RE% < V% THEN V% = RE%
4334 IF V% < BE% THEN BE% = V%
4336 IF BE% <= AL% THEN GOTO 4520
4337 IF V% = -1 THEN GOTO 4520
4338 GOTO 4500
4340 IF RE% > V% THEN V% = RE%
4342 IF V% > AL% THEN AL% = V%
4344 IF AL% >= BE% THEN GOTO 4520
4346 IF V% = 1 THEN GOTO 4520
4500 C% = C% + 1
4501 REM IF 0 = ST% THEN PRINT "c ";C%
4505 IF C% < 3 THEN GOTO 4180
4510 R% = R% + 1
4511 REM IF 0 = ST% THEN PRINT "r ";R%
4515 IF R% < 3 THEN GOTO 4170
4520 RE% = V%
4530 IF ST% = 0 THEN RETURN
4540 GOTO 4280

